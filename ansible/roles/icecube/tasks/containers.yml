- name: Load general variables
  include_vars:
    file: general.yml

- name: Az cli user
  user:
    name: "{{ az_user.name }}"
    uid: "{{ az_user.uid }}"
    home: "{{ az_user.home }}"
    create_home: yes
    comment: "disabled user for use in docker containers"
    password: '!'
  register: azu

- name: Az cli home dirs
  file:
    path: "{{ az_user.home }}/{{ item }}"
    owner: "{{ az_user.name }}"
    state: directory
    mode: "0700"
  with_items: "{{ az_dirs }}"

- name: Az cli env dirs
  file:
    path: "{{ az_user.home }}/{{ item.key }}/.k9s"
    owner: "{{ az_user.name }}"
    state: directory
    mode: "0700"
  with_dict: "{{ az_envs }}"

- name: K9S config
  template:
    src: "templates/k9s-conf.yml.j2"
    dest: "{{ az_user.home }}/{{ item.key }}/.k9s/config.yml"
    owner: "{{ az_user.name }}"
    mode: "0700"
  with_dict: "{{ az_envs }}"

- name: K9S skin
  copy:
    src: files/k9s-transparant-skin.yml
    dest: "{{ az_user.home }}/{{ item.key }}/.k9s/skin.yml"
    owner: "{{ az_user.name }}"
    mode: "0700"
  with_dict: "{{ az_envs }}"

- name: Az cli Build template
  template:
    src: "templates/{{ az_img.docker_file_template }}"
    dest: "{{ az_img.build_dir }}/Dockerfile"
  register: dockerfile

# ugly removal of image to force a rebuild when the dockerfile is changed
- name: Az cli remove image
  docker_image:
    name: "{{ az_img.name }}" 
    tag: "{{ az_img.tag }}"
    state: absent
    force_absent: yes
  when: dockerfile.changed

- name: Az cli build image
  docker_image:
    name: "{{ az_img.name }}" 
    tag: "{{ az_img.tag }}"
    state: present
    source: build
    build:
      path: "{{ az_img.build_dir }}"


#- name: Terraform container
#  docker_container:
#    name: tf
#    image: hashicorp/terraform:1.0.10
#    state: present
#    recreate: yes
#    mounts:
#      - type: bind
#        read_only: no
#        source: "{{ home_dir }}/{{ docker_data_dir }}/terraform"
#        target: /tf
